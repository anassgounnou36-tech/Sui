# Sui RPC endpoints (multi-RPC with failover)
SUI_RPC_MAINNET_PRIMARY=https://sui-mainnet.public.blastapi.io
SUI_RPC_MAINNET_BACKUP=https://1rpc.io/sui
SUI_RPC_MAINNET_FALLBACK=https://sui.rpc.grove.city/v1/01fdb492

# Legacy single RPC (optional, for backward compatibility)
# SUI_RPC_MAINNET=https://sui-mainnet.public.blastapi.io

# Wallet configuration (NEVER commit real keys!)
# Supports hex (with or without 0x prefix) or base64 format
PRIVATE_KEY=your_private_key_here
WALLET_ADDRESS=0x_your_wallet_address_here

# Flashloan configuration
# Default strategy: Cetus fee-tier arbitrage (0.05% vs 0.25%) with SUI flashloans
FLASHLOAN_ASSET=SUI
FLASHLOAN_AMOUNT=10000000000
# For SUI: 10 SUI = 10,000,000,000 (9 decimals)
# Maximum recommended: Dynamic based on pool liquidity

# Minimum trade size enforcement
MIN_TRADE_SUI=1.0
# Minimum 1 SUI for live mode to avoid rounding issues
# Simulation allows smaller sizes with warnings

# Suilend safety buffer
SUILEND_SAFETY_BUFFER=0
# Buffer amount (in base units) to keep as reserve capacity
# Default 0 means no buffer

# Safety confirmation for large amounts (>100k USDC equivalent)
LIVE_CONFIRM=false
# Set to true if using large flashloan amounts

# Profit and spread thresholds
MIN_PROFIT_USD=0
# Minimum profit in USD to execute trade (default: 0, no gate)
# Note: MIN_PROFIT and MIN_PROFIT_USDC are deprecated. Use MIN_PROFIT_USD instead.
MIN_SPREAD_PERCENT=0.5
# Minimum spread percentage required (0.5%)
CONSECUTIVE_SPREAD_REQUIRED=2
# Number of consecutive intervals with spread required

# Risk management
MAX_SLIPPAGE_PERCENT=1.0
# Maximum slippage allowed (1%)
GAS_BUDGET=100000
# Gas budget in MIST
MAX_CONSECUTIVE_FAILURES=3
# Kill switch after N consecutive failures

# Monitoring
CHECK_INTERVAL_MS=5000
# Price check interval in milliseconds
FINALITY_POLL_INTERVAL_MS=500
# Finality check interval (500ms)
FINALITY_MAX_WAIT_MS=10000
# Maximum wait for finality (10s)

# RPC rotation
ROTATE_AFTER_REQUESTS=20
# Rotate to next RPC endpoint after N requests (round-robin)
# Helps distribute load across multiple RPC providers

# Cache configuration
POOL_STATE_CACHE_TTL_MS=5000
# Cache pool state for 5 seconds to reduce RPC load

# Verification
VERIFY_ON_CHAIN=true
# Verify package/object IDs on startup

# Dry run mode (set to true to simulate without executing)
DRY_RUN=false

# Coin type configuration
# Bridged USDC is the default for Cetus fee-tier arbitrage
BRIDGED_USDC_COIN_TYPE=0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7::usdc::USDC

# DEPRECATED: USDC_COIN_TYPE is no longer used. Set BRIDGED_USDC_COIN_TYPE instead.
# DEPRECATED: MODE environment variable is no longer used. The bot defaults to Cetus fee-tier arbitrage.
# DEPRECATED: ALLOW_WRAPPED_USDC is no longer relevant for the default strategy.

# Cetus pool IDs (defaults provided for mainnet)
# Cetus 0.05% fee tier pool (SUI/bridged USDC)
CETUS_POOL_ID_005=0x51e883ba7c0b566a26cbc8a94cd33eb0abd418a77cc1e60ad22fd9b1f29cd2ab
# Cetus 0.25% fee tier pool (SUI/bridged USDC)
CETUS_POOL_ID_025=0xb8d7d9e66a60c239e7a60110efcf8de6c705580ed924d0dde141f4a0e2c90105

# Optional: Override protocol package IDs
# SUILEND_PACKAGE_ID=0x902f7ee4a68f6f63b05acd66e7aacc6de72703da4d8e0c6f94c1dd4b73c62e85
# SUILEND_LENDING_MARKET=0x84030d26d85eaa7035084a057f2f11f701b7e2e4eda87551becbc7c97505ece1
# NAVI_PACKAGE_ID=0x06d8af64fe58327e9f2b7b33b9fad9a5d0f0fb1ba38b024de09c767c10241e42
# CETUS_PACKAGE_ID=0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb
# CETUS_GLOBAL_CONFIG_ID=0xdaa46292632c3c4d8f31f23ea0f9b36a28ff3677e9684980e4438403a67a3d8f
# Default: CLMM GlobalConfig for direct pool::swap calls
# For integration/router: 0x996c4d9480708fb8b92aa7acf819fb0497b5ec8e65ba06601cae2fb6db3312c3

# Telegram Notifications (optional)
# Set ENABLE_TELEGRAM=true to enable notifications
ENABLE_TELEGRAM=false
# Get bot token from @BotFather on Telegram
# Get chat ID by messaging your bot and visiting:
# https://api.telegram.org/bot<YOUR_BOT_TOKEN>/getUpdates
TELEGRAM_BOT_TOKEN=
TELEGRAM_CHAT_ID=

# WebSocket Triggers (optional)
# Set ENABLE_WS=true to enable WebSocket-based triggers for immediate re-evaluation
ENABLE_WS=false
# WS_TRIGGER_MODE: 'object' (pool object updates) or 'event' (swap events)
WS_TRIGGER_MODE=object
# MIN_SWAP_USD: Minimum swap size in USD for event mode filtering (0 = no filter)
MIN_SWAP_USD=0
# WS_ENDPOINT: Optional WebSocket endpoint override for event subscriptions
# Use this when your HTTP RPC provider doesn't support WebSocket subscriptions
# Example WS-capable providers:
#   - wss://sui-mainnet.public.blastapi.io (Blast API)
#   - wss://sui-mainnet-rpc.allthatnode.com/websocket (AllThatNode)
# Note: Alchemy HTTP works but does not support WS event subscriptions (suix_subscribeEvent)
# Leave empty to auto-derive from HTTP endpoint (may fail with some providers)
WS_ENDPOINT=
